[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "h3xrecon-client"
dynamic = ["version"]
description = 'Client for the H3xRecon Bug Bounty Reconnaissance Automation System'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "h3xit", email = "h3xit@protonmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "typer>=0.9.0",
    "prompt_toolkit>=3.0.43",
    "rich>=13.7.0",
    "asyncio==3.4.3",
    "loguru==0.7.2",
    "asyncpg==0.30.0",
    "nats-py==2.9.0",
    "python-dateutil==2.9.0.post0",
    "python-dotenv==1.0.1",
    "tabulate==0.9.0",
    "PyYAML==6.0.2",
    "redis==5.2.0"
]

[project.urls]
Documentation = "https://github.com/h3xit/h3xrecon-client#readme"
Issues = "https://github.com/h3xit/h3xrecon-client/issues"
Source = "https://github.com/h3xit/h3xrecon-client"

[tool.hatch.version]
path = "src/h3xrecon_client/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/h3xrecon_client tests}"

[project.scripts]
h3xrecon = "h3xrecon_client.cli:app"

[tool.coverage.paths]
h3xrecon_client = ["src/h3xrecon_client", "*/h3xrecon-client/src/h3xrecon_client"]
tests = ["tests", "*/h3xrecon-client/tests"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=h3xrecon_client --cov-report=term-missing"

[tool.coverage.run]
source = ["h3xrecon_client"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
